//read a script command files
load("myScript.js")

db.coll.estimatedDocumentCount()

//CREATE
db.coll.insertOne({name: "Max"})
db.coll.insertMany([{name: "Max"}, {name:"Alex"}]) // ordered bulk insert
db.coll.insertMany([{name: "Max"}, {name:"Alex"}], {ordered: false}) // unordered bulk insert
db.coll.insertOne({date: ISODate()})
db.coll.insertOne({name: "Max"}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})

//READ
db.coll.findOne() // returns a single document
db.coll.find()    // returns a cursor - show 20 results - "it" to display more
db.coll.find().pretty()
db.coll.find({name: "Max", age: 32}) // implicit logical "AND".
db.coll.find({date: ISODate("2020-09-25T13:57:17.180Z")})
db.coll.find({name: "Max", age: 32}).explain("executionStats") // or "queryPlanner" or "allPlansExecution"
db.coll.distinct("name")

// Count
db.coll.countDocuments({age: 32}) // alias for an aggregation pipeline - accurate count
db.coll.estimatedDocumentCount()  // estimation based on collection metadata

// Comparison
db.coll.find({"year": {$gt: 1970}})
db.coll.find({"year": {$gte: 1970}})
db.coll.find({"year": {$lt: 1970}})
db.coll.find({"year": {$lte: 1970}})
db.coll.find({"year": {$ne: 1970}})
db.coll.find({"year": {$in: [1958, 1959]}})
db.coll.find({"year": {$nin: [1958, 1959]}})

// Logical
db.coll.find({name:{$not: {$eq: "Max"}}})
db.coll.find({$or: [{"year" : 1958}, {"year" : 1959}]})
db.coll.find({$nor: [{price: 1.99}, {sale: true}]})
db.coll.find({
  $and: [
    {$or: [{qty: {$lt :10}}, {qty :{$gt: 50}}]},
    {$or: [{sale: true}, {price: {$lt: 5 }}]}
  ]
})

// Element
db.coll.find({name: {$exists: true}})
db.coll.find({"zipCode": {$type: 2 }})
db.coll.find({"zipCode": {$type: "string"}})

// Aggregation Pipeline
db.coll.aggregate([
  {$match: {status: "A"}},
  {$group: {_id: "$cust_id", total: {$sum: "$amount"}}},
  {$sort: {total: -1}}
])

// Text search with a "text" index
db.coll.find({$text: {$search: "cake"}}, {score: {$meta: "textScore"}}).sort({score: {$meta: "textScore"}})

// Regex
db.coll.find({name: /^Max/})   // regex: starts by letter "M"
db.coll.find({name: /^Max$/i}) // regex case insensitive

// Array
db.coll.find({tags: {$all: ["Realm", "Charts"]}})
db.coll.find({field: {$size: 2}}) // impossible to index - prefer storing the size of the array & update it
db.coll.find({results: {$elemMatch: {product: "xyz", score: {$gte: 8}}}})

// Projections
db.coll.find({"x": 1}, {"actors": 1})               // actors + _id
db.coll.find({"x": 1}, {"actors": 1, "_id": 0})     // actors
db.coll.find({"x": 1}, {"actors": 0, "summary": 0}) // all but "actors" and "summary"

// Sort, skip, limit
db.coll.find({}).sort({"year": 1, "rating": -1}).skip(10).limit(3)

// Read Concern
db.coll.find().readConcern("majority")


//UPDATE 
db.coll.updateOne({"_id": 1}, {$set: {"year": 2016, name: "Max"}})
db.coll.updateOne({"_id": 1}, {$unset: {"year": 1}})
db.coll.updateOne({"_id": 1}, {$rename: {"year": "date"} })
db.coll.updateOne({"_id": 1}, {$inc: {"year": 5}})
db.coll.updateOne({"_id": 1}, {$mul: {price: NumberDecimal("1.25"), qty: 2}})
db.coll.updateOne({"_id": 1}, {$min: {"imdb": 5}})
db.coll.updateOne({"_id": 1}, {$max: {"imdb": 8}})
db.coll.updateOne({"_id": 1}, {$currentDate: {"lastModified": true}})
db.coll.updateOne({"_id": 1}, {$currentDate: {"lastModified": {$type: "timestamp"}}})

// Array
db.coll.updateOne({"_id": 1}, {$push :{"array": 1}})
db.coll.updateOne({"_id": 1}, {$pull :{"array": 1}})
db.coll.updateOne({"_id": 1}, {$addToSet :{"array": 2}})
db.coll.updateOne({"_id": 1}, {$pop: {"array": 1}})  // last element
db.coll.updateOne({"_id": 1}, {$pop: {"array": -1}}) // first element
db.coll.updateOne({"_id": 1}, {$pullAll: {"array" :[3, 4, 5]}})
db.coll.updateOne({"_id": 1}, {$push: {"scores": {$each: [90, 92]}}})
db.coll.updateOne({"_id": 2}, {$push: {"scores": {$each: [40, 60], $sort: 1}}}) // array sorted
db.coll.updateOne({"_id": 1, "grades": 80}, {$set: {"grades.$": 82}})
db.coll.updateMany({}, {$inc: {"grades.$[]": 10}})
db.coll.updateMany({}, {$set: {"grades.$[element]": 100}}, {multi: true, arrayFilters: [{"element": {$gte: 100}}]})

// FindOneAndUpdate
db.coll.findOneAndUpdate({"name": "Max"}, {$inc: {"points": 5}}, {returnNewDocument: true})

// Upsert
db.coll.updateOne({"_id": 1}, {$set: {item: "apple"}, $setOnInsert: {defaultQty: 100}}, {upsert: true})

// Replace
db.coll.replaceOne({"name": "Max"}, {"firstname": "Maxime", "surname": "Beugnet"})

// Write concern
db.coll.updateMany({}, {$set: {"x": 1}}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})


//DELETE 
db.coll.deleteOne({name: "Max"})
db.coll.deleteMany({name: "Max"}, {"writeConcern": {"w": "majority", "wtimeout": 5000}})
db.coll.deleteMany({}) // WARNING! Deletes all the docs but not the collection itself and its index definitions
db.coll.findOneAndDelete({"name": "Max"})


//Funciones
db.coll.stats()
db.coll.storageSize()
db.coll.totalIndexSize()
db.coll.totalSize()
db.coll.validate({full: true})
db.coll.renameCollection("new_coll", true) // 2nd parameter to drop the target collection if exists



//forEach
db.bsmt.find().forEach(function(doc) {
  print("PID: " + doc["PID"]);
  print("Bsmt Qual: " + doc["Bsmt Qual"]);
  print("Bsmt Cond: " + doc["Bsmt Cond"]);
  print("Bsmt Exposure: " + doc["Bsmt Exposure"]);
  print("BsmtFin Type 1: " + doc["BsmtFin Type 1"]);
  print("BsmtFin SF 1: " + doc["BsmtFin SF 1"]);
  print("BsmtFin Type 2: " + doc["BsmtFin Type 2"]);
  print("BsmtFin SF 2: " + doc["BsmtFin SF 2"]);
  print("Bsmt Unf SF: " + doc["Bsmt Unf SF"]);
  print("Total Bsmt SF: " + doc["Total Bsmt SF"]);
  print("Bsmt Full Bath: " + doc["Bsmt Full Bath"]);
  print("Bsmt Half Bath: " + doc["Bsmt Half Bath"]);
  print("------------------------------");
});


db.pool.find().forEach(function(doc) {
  if (doc["Pool QC"] === "TA") {
    print("Just until Those");
	print("Pool QC: " + doc["Pool QC"]);
	print("Pool Area: " + doc["Pool Area"]);
    return; 
  }
});
db.pool.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).forEach(function(doc) {
	print("PID: " + doc["PID"]);
});

db.bsmt.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).count()
db.garage.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).count()
db.misc.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).count()
db.pool.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).count()


db.garage.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).forEach(function(doc) {
	print("PID: " + doc["PID"]);
});

db.misc.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).forEach(function(doc) {
	print("PID: " + doc["PID"]);
});

db.pool.find({PID:{$in:[532351140,535327140,905478190,908102060,531475220,535353060,535450160,535451170,902205010,905402060,905402070,905475500,906226060,906226070,906226090,906226100,906226110,906226120,906226140,908102050,908128060,908225370,908250030,912251110,914476020,923202060,534276190,534451080,535327230,535375140,535451230,902427045,903232030,904101170,908154080,910251050,914476080,531477040,534252070,534276290,534429030,535457050,902427140,902427180,905228020,905475520,905480180,908152180,909275160,910206010,923202220,527226010,532351150,535425050,535451190,535451210,535454030,535454050,535454060,904100170,904301410,905101330,905451050,916252170,923125030]}},{PID:1}).forEach(function(doc) {
	print("PID: " + doc["PID"]);
});